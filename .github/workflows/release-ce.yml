name: Release CE

on:
  pull_request:
    types: [ closed ]
    branches: [ release ]
  workflow_dispatch:
    inputs:
      deployment_mode:
        description: 'Deployment Mode'
        required: true
        type: choice
        default: 'dry-run'
        options:
          - 'dry-run'        # Build only, no deployments
          - 'stage-only'     # Deploy to stores as drafts/candidates
          - 'production'     # Full production deployment
      # Store selection for stage-only and dry-run modes (ignored in production)
      deploy_docker:
        description: 'Deploy to Docker Hub (stage-only/dry-run)'
        required: false
        type: boolean
        default: true
      deploy_snap:
        description: 'Deploy to Snap Store (stage-only/dry-run)'
        required: false
        type: boolean
        default: true
      deploy_microsoft:
        description: 'Deploy to Microsoft Store (stage-only/dry-run)'
        required: false
        type: boolean
        default: true
      deploy_apple:
        description: 'Deploy to Apple App Store (stage-only/dry-run)'
        required: false
        type: boolean
        default: true

jobs:
  # Step 1: Calculate version and deployment parameters
  calculate-version:
    name: Calculate Version
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || (github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'release')
    outputs:
      version: ${{ steps.calc.outputs.version }}
      previous_version: ${{ steps.calc.outputs.previous-version }}
      deployment_mode: ${{ steps.calc.outputs.deployment-mode }}
      dry_run: ${{ steps.calc.outputs.dry-run }}
      stage_only: ${{ steps.calc.outputs.stage-only }}
      deploy_docker: ${{ steps.calc.outputs.deploy-docker }}
      deploy_snap: ${{ steps.calc.outputs.deploy-snap }}
      deploy_microsoft: ${{ steps.calc.outputs.deploy-microsoft }}
      deploy_apple: ${{ steps.calc.outputs.deploy-apple }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine deployment mode
        id: deployment_mode
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            MODE="${{ inputs.deployment_mode }}"
          else
            # PR merges to release branch are always production
            MODE="production"
          fi
          echo "mode=$MODE" >> $GITHUB_OUTPUT

      - name: Calculate version and parameters
        id: calc
        uses: ./.github/actions/calculate-version
        with:
          deployment-mode: ${{ steps.deployment_mode.outputs.mode }}
          deploy-docker: ${{ inputs.deploy_docker }}
          deploy-snap: ${{ inputs.deploy_snap }}
          deploy-microsoft: ${{ inputs.deploy_microsoft }}
          deploy-apple: ${{ inputs.deploy_apple }}

      - name: Display configuration
        run: |
          echo "# 🎯 Release Configuration" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Version** | ${{ steps.calc.outputs.version }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Mode** | ${{ steps.calc.outputs.deployment-mode }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Dry Run** | ${{ steps.calc.outputs.dry-run }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Stage Only** | ${{ steps.calc.outputs.stage-only }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Deployment Targets" >> $GITHUB_STEP_SUMMARY
          echo "| Store | Deploy |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Hub | ${{ steps.calc.outputs.deploy-docker }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Snap Store | ${{ steps.calc.outputs.deploy-snap }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Microsoft Store | ${{ steps.calc.outputs.deploy-microsoft }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Apple App Store | ${{ steps.calc.outputs.deploy-apple }} |" >> $GITHUB_STEP_SUMMARY

  # Step 2: Build artifacts in parallel
  build-docker:
    name: Build Docker
    needs: [ calculate-version ]
    if: |
      needs.calculate-version.outputs.deploy_docker == 'true' ||
      needs.calculate-version.outputs.deployment_mode == 'production'
    uses: ./.github/workflows/_build-docker.yml
    with:
      version: ${{ needs.calculate-version.outputs.version }}
      edition: 'ce'

  build-desktop:
    name: Build Desktop
    needs: [ calculate-version ]
    if: |
      needs.calculate-version.outputs.deploy_microsoft == 'true' ||
      needs.calculate-version.outputs.deploy_apple == 'true' ||
      needs.calculate-version.outputs.deployment_mode == 'production'
    uses: ./.github/workflows/_build-desktop.yml
    with:
      version: ${{ needs.calculate-version.outputs.version }}
      edition: 'ce'
      platforms: >-
        ${{
          (needs.calculate-version.outputs.deploy_microsoft == 'true' || needs.calculate-version.outputs.deployment_mode == 'production')
            && 'windows-amd64,windows-arm64,' || ''
        }}${{
          (needs.calculate-version.outputs.deploy_apple == 'true' || needs.calculate-version.outputs.deployment_mode == 'production')
            && 'darwin-universal' || ''
        }}
    secrets:
      APPLE_DEVELOPER_ID_APPLICATION: ${{ secrets.APPLE_DEVELOPER_ID_APPLICATION }}
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_APP_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

  build-snap:
    name: Build Snap
    needs: [ calculate-version ]
    if: |
      needs.calculate-version.outputs.deploy_snap == 'true' ||
      needs.calculate-version.outputs.deployment_mode == 'production'
    uses: ./.github/workflows/_build-snap.yml
    with:
      version: ${{ needs.calculate-version.outputs.version }}
    secrets:
      SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_STORE_CREDENTIALS }}

  # Step 3: Sign and validate all builds
  sign-and-validate:
    name: Sign and Validate
    needs: [ calculate-version, build-docker, build-desktop, build-snap ]
    if: |
      always() &&
      needs.calculate-version.result == 'success' &&
      (needs.build-docker.result == 'success' || needs.build-docker.result == 'skipped') &&
      (needs.build-desktop.result == 'success' || needs.build-desktop.result == 'skipped') &&
      (needs.build-snap.result == 'success' || needs.build-snap.result == 'skipped')
    uses: ./.github/workflows/_sign-validate.yml
    with:
      version: ${{ needs.calculate-version.outputs.version }}
      validate-docker: ${{ needs.build-docker.result == 'success' }}
      validate-snap: ${{ needs.build-snap.result == 'success' }}
      validate-desktop: ${{ needs.build-desktop.result == 'success' }}
    secrets:
      SIGSTORE_ID_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Step 4: Deploy to various platforms (conditionally)
  deploy-snap:
    name: Deploy Snap
    needs: [ calculate-version, sign-and-validate ]
    if: |
      needs.calculate-version.outputs.dry_run == 'false' &&
      needs.calculate-version.outputs.deploy_snap == 'true'
    uses: ./.github/workflows/_deploy-snap.yml
    with:
      version: ${{ needs.calculate-version.outputs.version }}
      channel: ${{ needs.calculate-version.outputs.stage_only == 'true' && 'edge' || 'stable' }}
      dry-run: false
    secrets:
      SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_STORE_CREDENTIALS }}

  deploy-microsoft:
    name: Deploy Microsoft
    needs: [ calculate-version, sign-and-validate ]
    if: |
      needs.calculate-version.outputs.dry_run == 'false' &&
      needs.calculate-version.outputs.deploy_microsoft == 'true'
    uses: ./.github/workflows/_deploy-microsoft.yml
    with:
      version: ${{ needs.calculate-version.outputs.version }}
      stage-only: ${{ needs.calculate-version.outputs.stage_only == 'true' }}
    secrets:
      MS_TENANT_ID: ${{ secrets.MS_TENANT_ID }}
      MS_CLIENT_ID: ${{ secrets.MS_CLIENT_ID }}
      MS_CLIENT_SECRET: ${{ secrets.MS_CLIENT_SECRET }}
      MS_APP_ID: ${{ secrets.MS_APP_ID }}

  deploy-apple:
    name: Deploy Apple
    needs: [ calculate-version, sign-and-validate ]
    if: |
      needs.calculate-version.outputs.dry_run == 'false' &&
      needs.calculate-version.outputs.deploy_apple == 'true'
    uses: ./.github/workflows/_deploy-apple.yml
    with:
      version: ${{ needs.calculate-version.outputs.version }}
      stage-only: ${{ needs.calculate-version.outputs.stage_only == 'true' }}
    secrets:
      APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
      APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
      APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
      APPLE_DEVELOPER_ID: ${{ secrets.APPLE_DEVELOPER_ID }}
      APPLE_DEVELOPER_TEAM_ID: ${{ secrets.APPLE_DEVELOPER_TEAM_ID }}

  # Step 5: Create GitHub release
  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [ calculate-version, deploy-snap, deploy-microsoft, deploy-apple ]
    if: |
      always() &&
      needs.calculate-version.outputs.dry_run == 'false' &&
      (
        (needs.calculate-version.outputs.stage_only == 'true' && (
          needs.deploy-snap.result == 'success' ||
          needs.deploy-microsoft.result == 'success' ||
          needs.deploy-apple.result == 'success'
        )) ||
        (needs.calculate-version.outputs.deployment_mode == 'production' &&
         (needs.deploy-snap.result != 'failure') &&
         (needs.deploy-microsoft.result != 'failure') &&
         (needs.deploy-apple.result != 'failure'))
      )
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Prepare release assets
        run: |
          mkdir -p final-assets

          # Copy Docker images
          find artifacts -name "*.tar" -exec cp {} final-assets/ \; 2>/dev/null || true

          # Copy Snap packages
          find artifacts -name "*.snap" -exec cp {} final-assets/ \; 2>/dev/null || true

          # Copy desktop builds
          find artifacts -name "*.exe" -o -name "*.dmg" -o -name "*.pkg" \
            -o -name "*.msixbundle" -exec cp {} final-assets/ \; 2>/dev/null || true

          # Copy signatures
          if [ -f artifacts/signatures/signatures.tar.gz ]; then
            tar -xzf artifacts/signatures/signatures.tar.gz -C final-assets/
          fi

          echo "📦 Release assets prepared:"
          ls -la final-assets/ || echo "No assets found"

      - name: Create GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ needs.calculate-version.outputs.version }}
          name: Release v${{ needs.calculate-version.outputs.version }}
          draft: ${{ needs.calculate-version.outputs.stage_only == 'true' }}
          prerelease: false
          generateReleaseNotes: true
          artifacts: final-assets/*
          body: |
            ## WhoDB v${{ needs.calculate-version.outputs.version }}

            ### Installation Methods

            #### Docker
            ```bash
            docker pull clidey/whodb:${{ needs.calculate-version.outputs.version }}
            docker pull clidey/whodb:latest
            ```

            #### Snap
            ```bash
            # Stable channel
            sudo snap install whodb

            # Edge channel (preview releases)
            sudo snap install whodb --edge
            ```

            #### Direct Downloads
            See assets below for platform-specific packages.

            ### Verification
            All artifacts are signed with Sigstore. To verify:
            ```bash
            cosign verify-blob --signature <file>.sig --certificate <file>.pem <file>
            ```

  # Step 6: Deploy to Docker Hub (after GitHub release)
  deploy-docker:
    name: Deploy Docker
    runs-on: ubuntu-latest
    needs: [ calculate-version, create-github-release ]
    if: |
      always() &&
      needs.calculate-version.outputs.dry_run == 'false' &&
      needs.calculate-version.outputs.deploy_docker == 'true' &&
      needs.calculate-version.outputs.stage_only != 'true' &&
      needs.create-github-release.result == 'success'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download Docker images
        uses: actions/download-artifact@v4
        with:
          pattern: docker-image-*
          path: docker-images/

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Load and push Docker images
        run: |
          VERSION="${{ needs.calculate-version.outputs.version }}"
          echo "📦 Deploying Docker images for version ${VERSION}"

          # Load images
          echo "Loading AMD64 image..."
          docker load < docker-images/docker-image-amd64/whodb-docker-amd64.tar

          echo "Loading ARM64 image..."
          docker load < docker-images/docker-image-arm64/whodb-docker-arm64.tar

          # Tag and push individual architecture images
          echo "Pushing AMD64 image..."
          docker tag clidey/whodb:${VERSION}-amd64 clidey/whodb:${VERSION}-amd64
          docker push clidey/whodb:${VERSION}-amd64

          echo "Pushing ARM64 image..."
          docker tag clidey/whodb:${VERSION}-arm64 clidey/whodb:${VERSION}-arm64
          docker push clidey/whodb:${VERSION}-arm64

          # Create and push multi-arch manifest
          echo "Creating multi-arch manifest..."
          docker manifest create clidey/whodb:${VERSION} \
            clidey/whodb:${VERSION}-amd64 \
            clidey/whodb:${VERSION}-arm64
          docker manifest push clidey/whodb:${VERSION}

          # Update latest tag
          echo "Updating latest tag..."
          docker manifest create clidey/whodb:latest \
            clidey/whodb:${VERSION}-amd64 \
            clidey/whodb:${VERSION}-arm64
          docker manifest push clidey/whodb:latest

          echo "✅ Docker images deployed successfully"

      - name: Sign Docker images with Cosign
        run: |
          # Install Cosign
          curl -sSL https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64 -o cosign
          chmod +x cosign
          sudo mv cosign /usr/local/bin/

          VERSION="${{ needs.calculate-version.outputs.version }}"

          echo "🔏 Signing Docker images..."
          cosign sign --yes clidey/whodb:${VERSION}
          cosign sign --yes clidey/whodb:latest

          echo "✅ Docker images signed"

  # Step 7: Generate Homebrew cask (production only)
  generate-homebrew-cask:
    name: Generate Homebrew Cask
    runs-on: macos-latest
    needs: [ calculate-version, create-github-release ]
    if: |
      needs.calculate-version.outputs.dry_run == 'false' &&
      needs.calculate-version.outputs.stage_only != 'true' &&
      needs.calculate-version.outputs.deployment_mode == 'production' &&
      needs.create-github-release.result == 'success'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download macOS DMG
        uses: actions/download-artifact@v4
        with:
          name: desktop-darwin-universal
          path: desktop-builds/

      - name: Generate Homebrew cask file
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ needs.calculate-version.outputs.version }}"

          # Find DMG file
          DMG_PATH=$(find desktop-builds -name "*.dmg" | head -1)

          if [ -z "$DMG_PATH" ]; then
            echo "❌ No DMG file found"
            exit 1
          fi

          echo "Found DMG: $DMG_PATH"

          # Calculate SHA256
          SHA256=$(shasum -a 256 "$DMG_PATH" | cut -d' ' -f1)
          echo "SHA256: $SHA256"

          # Generate cask file
          cat > whodb.rb <<EOF
          cask "whodb" do
            version "${VERSION}"
            sha256 "${SHA256}"

            url "https://github.com/clidey/whodb/releases/download/v${VERSION}/whodb.dmg"
            name "WhoDB"
            desc "Database management tool with AI-powered features"
            homepage "https://github.com/clidey/whodb"

            app "WhoDB.app"

            zap trash: [
              "~/Library/Application Support/WhoDB",
              "~/Library/Preferences/com.clidey.whodb.plist",
              "~/Library/Saved Application State/com.clidey.whodb.savedState"
            ]
          end
          EOF

          echo "✅ Homebrew cask generated"
          cat whodb.rb

      - name: Upload cask file
        uses: actions/upload-artifact@v4
        with:
          name: homebrew-cask
          path: whodb.rb
          retention-days: 30

  # Step 8: Verify deployments
  verify-deployments:
    name: Verify Deployments
    needs: [ calculate-version, deploy-docker, deploy-snap, create-github-release ]
    if: |
      always() &&
      needs.calculate-version.outputs.dry_run == 'false' &&
      needs.calculate-version.outputs.stage_only != 'true'
    uses: ./.github/workflows/_verify-deployment.yml
    with:
      version: ${{ needs.calculate-version.outputs.version }}
      verify-docker: ${{ needs.deploy-docker.result == 'success' }}
      verify-snap: ${{ needs.deploy-snap.result == 'success' }}
      verify-github: ${{ needs.create-github-release.result == 'success' }}

  # Step 9: Rollback on failure (production only)
  rollback-on-failure:
    name: Rollback if Failed
    needs: [ calculate-version, verify-deployments ]
    if: |
      failure() &&
      needs.calculate-version.outputs.dry_run == 'false' &&
      needs.calculate-version.outputs.stage_only != 'true' &&
      needs.verify-deployments.outputs.all-verified != 'true'
    uses: ./.github/workflows/_rollback.yml
    with:
      version: ${{ needs.calculate-version.outputs.version }}
      previous-version: ${{ needs.calculate-version.outputs.previous_version }}
      rollback-docker: ${{ needs.calculate-version.outputs.deploy_docker == 'true' }}
      rollback-github: true
    secrets:
      DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME }}
      DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Step 10: Final summary
  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [
      calculate-version,
      build-docker,
      build-desktop,
      build-snap,
      sign-and-validate,
      deploy-docker,
      deploy-snap,
      deploy-microsoft,
      deploy-apple,
      create-github-release,
      generate-homebrew-cask,
      verify-deployments
    ]
    steps:
      - name: Generate comprehensive summary
        run: |
          echo "# 📊 Release Summary for v${{ needs.calculate-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Mode:** ${{ needs.calculate-version.outputs.deployment_mode }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Build Status
          echo "## 🔨 Build Status" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.build-docker.result }}" = "success" ]; then
            echo "| Docker | ✅ Success |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.build-docker.result }}" = "skipped" ]; then
            echo "| Docker | ⏭️ Skipped |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Docker | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.build-desktop.result }}" = "success" ]; then
            echo "| Desktop | ✅ Success |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.build-desktop.result }}" = "skipped" ]; then
            echo "| Desktop | ⏭️ Skipped |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Desktop | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.build-snap.result }}" = "success" ]; then
            echo "| Snap | ✅ Success |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.build-snap.result }}" = "skipped" ]; then
            echo "| Snap | ⏭️ Skipped |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Snap | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

          # Deployment Status
          echo "## 🚀 Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "| Platform | Status | Notes |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|-------|" >> $GITHUB_STEP_SUMMARY

          # Docker Hub
          if [ "${{ needs.deploy-docker.result }}" = "success" ]; then
            echo "| Docker Hub | ✅ Deployed | Latest tag updated |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.deploy-docker.result }}" = "skipped" ]; then
            if [ "${{ needs.calculate-version.outputs.stage_only }}" = "true" ]; then
              echo "| Docker Hub | ⏭️ Skipped | Stage-only mode |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| Docker Hub | ⏭️ Skipped | Not selected |" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "| Docker Hub | ❌ Failed | Check logs |" >> $GITHUB_STEP_SUMMARY
          fi

          # Snap Store
          if [ "${{ needs.deploy-snap.result }}" = "success" ]; then
            CHANNEL="${{ needs.calculate-version.outputs.stage_only == 'true' && 'edge' || 'stable' }}"
            echo "| Snap Store | ✅ Deployed | ${CHANNEL} channel |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.deploy-snap.result }}" = "skipped" ]; then
            echo "| Snap Store | ⏭️ Skipped | Not selected |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Snap Store | ❌ Failed | Check logs |" >> $GITHUB_STEP_SUMMARY
          fi

          # Microsoft Store
          if [ "${{ needs.deploy-microsoft.result }}" = "success" ]; then
            if [ "${{ needs.calculate-version.outputs.stage_only }}" = "true" ]; then
              echo "| Microsoft Store | ✅ Deployed | Draft submission |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| Microsoft Store | ✅ Deployed | Submitted for certification |" >> $GITHUB_STEP_SUMMARY
            fi
          elif [ "${{ needs.deploy-microsoft.result }}" = "skipped" ]; then
            echo "| Microsoft Store | ⏭️ Skipped | Not selected |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Microsoft Store | ❌ Failed | Check logs |" >> $GITHUB_STEP_SUMMARY
          fi

          # Apple App Store
          if [ "${{ needs.deploy-apple.result }}" = "success" ]; then
            if [ "${{ needs.calculate-version.outputs.stage_only }}" = "true" ]; then
              echo "| Apple App Store | ✅ Deployed | TestFlight only |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| Apple App Store | ✅ Deployed | Submitted for review |" >> $GITHUB_STEP_SUMMARY
            fi
          elif [ "${{ needs.deploy-apple.result }}" = "skipped" ]; then
            echo "| Apple App Store | ⏭️ Skipped | Not selected |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Apple App Store | ❌ Failed | Check logs |" >> $GITHUB_STEP_SUMMARY
          fi

          # GitHub Release
          if [ "${{ needs.create-github-release.result }}" = "success" ]; then
            if [ "${{ needs.calculate-version.outputs.stage_only }}" = "true" ]; then
              echo "| GitHub Release | ✅ Created | Draft release |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| GitHub Release | ✅ Created | Published |" >> $GITHUB_STEP_SUMMARY
            fi
          elif [ "${{ needs.create-github-release.result }}" = "skipped" ]; then
            echo "| GitHub Release | ⏭️ Skipped | Dry run mode |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| GitHub Release | ❌ Failed | Check logs |" >> $GITHUB_STEP_SUMMARY
          fi

          # Homebrew
          if [ "${{ needs.generate-homebrew-cask.result }}" = "success" ]; then
            echo "| Homebrew Cask | ✅ Generated | Formula created |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.generate-homebrew-cask.result }}" = "skipped" ]; then
            echo "| Homebrew Cask | ⏭️ Skipped | Not production |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Homebrew Cask | ❌ Failed | Check logs |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

          # Verification Status
          if [ "${{ needs.verify-deployments.result }}" = "success" ]; then
            echo "## ✅ Verification" >> $GITHUB_STEP_SUMMARY
            if [ "${{ needs.verify-deployments.outputs.all-verified }}" = "true" ]; then
              echo "All deployments verified successfully!" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ Some deployments could not be verified. Check verification report." >> $GITHUB_STEP_SUMMARY
            fi
          elif [ "${{ needs.verify-deployments.result }}" = "skipped" ]; then
            echo "## ⏭️ Verification" >> $GITHUB_STEP_SUMMARY
            echo "Skipped (stage-only or dry-run mode)" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

          # Next Steps
          echo "## 📝 Next Steps" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.calculate-version.outputs.dry_run }}" = "true" ]; then
            echo "This was a dry run. No actual deployments were made." >> $GITHUB_STEP_SUMMARY
            echo "To deploy, run the workflow again with a different mode." >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.calculate-version.outputs.stage_only }}" = "true" ]; then
            echo "Stage deployments completed. To promote to production:" >> $GITHUB_STEP_SUMMARY
            echo "1. Test the edge/draft releases" >> $GITHUB_STEP_SUMMARY
            echo "2. Promote Snap from edge to stable channel" >> $GITHUB_STEP_SUMMARY
            echo "3. Submit Microsoft Store draft for certification" >> $GITHUB_STEP_SUMMARY
            echo "4. Submit Apple TestFlight build for App Store review" >> $GITHUB_STEP_SUMMARY
            echo "5. Publish GitHub draft release" >> $GITHUB_STEP_SUMMARY
            echo "6. Deploy to Docker Hub" >> $GITHUB_STEP_SUMMARY
          else
            echo "Production deployment completed!" >> $GITHUB_STEP_SUMMARY
            echo "Monitor the following:" >> $GITHUB_STEP_SUMMARY
            echo "- Microsoft Store certification status" >> $GITHUB_STEP_SUMMARY
            echo "- Apple App Store review status" >> $GITHUB_STEP_SUMMARY
            echo "- User feedback on new release" >> $GITHUB_STEP_SUMMARY
          fi